"use client";

import { useEffect, useState, useRef } from 'react';
import { useSearchParams, useRouter } from 'next/navigation';
import { Navigation } from '@/components/Navigation';
import { Footer } from '@/components/Footer';
import { PropertyCard } from '@/components/PropertyCard';

import { Breadcrumbs } from '@/components/Breadcrumbs';
import { getProperties, searchProperties, getExperiences, getRetreats, createExperienceBooking, createTripBooking, isWishlisted, addToWishlist, removeFromWishlist } from '@/lib/database';
import { PropertyWithHost, SearchFilters as SearchFiltersType, Experience } from '@/lib/types';
import { 
  MagnifyingGlassIcon, 
  MapPinIcon, 
  FunnelIcon,
  AdjustmentsHorizontalIcon,
  XMarkIcon,
  StarIcon,
  BuildingOfficeIcon,
  CalendarIcon,
  ClockIcon,
  UsersIcon,
  BookmarkIcon as BookmarkOutline,
  BookmarkIcon as BookmarkSolid
} from '@heroicons/react/24/outline';
import Link from 'next/link';
import { SearchResultSkeleton } from '@/components/ui/LoadingSkeleton';
import Image from 'next/image';
import { buildCoverFirstImages } from '@/lib/media';
import { useAuth } from '@/contexts/AuthContext';
import { Modal } from '@/components/ui/Modal';
import { Input } from '@/components/ui/Input';
import { Button } from '@/components/ui/Button';
import toast from 'react-hot-toast';
import Script from 'next/script';
import { sendPaymentReceiptEmail } from '@/lib/notifications';

// Filter data for experiences and retreats
const experienceFilterData = {
  category: [
    { id: 'immersive', label: 'Immersive', icon: '🧘', color: 'bg-purple-100 text-purple-700 border-purple-200' },
    { id: 'playful', label: 'Playful', icon: '🎮', color: 'bg-green-100 text-green-700 border-green-200' },
    { id: 'culinary', label: 'Culinary', icon: '🍽️', color: 'bg-orange-100 text-orange-700 border-orange-200' },
    { id: 'meaningful', label: 'Meaningful', icon: '❤️', color: 'bg-red-100 text-red-700 border-red-200' }
  ],
  location: [
    { id: 'mountains', label: 'Mountains', icon: '🏔️', color: 'bg-blue-100 text-blue-700 border-blue-200' },
    { id: 'delhi-ncr', label: 'Delhi-NCR', icon: '🏙️', color: 'bg-gray-100 text-gray-700 border-gray-200' }
  ]
};

const retreatFilterData = {
  category: [
    { id: 'Couple', label: 'Couple', icon: '💑' },
    { id: 'Solo', label: 'Solo', icon: '🧘' },
    { id: 'Pet-Friendly', label: 'Pet-Friendly', icon: '🐕' },
    { id: 'Family', label: 'Family', icon: '👨‍👩‍👧‍👦' },
    { id: 'Purposeful', label: 'Purposeful', icon: '🎯' },
    { id: 'Senior Citizen', label: 'Senior Citizen', icon: '👴' },
    { id: 'Group', label: 'Group', icon: '👥' },
    { id: 'Parents', label: 'Parents', icon: '👨‍👩‍👦' }
  ]
};

export default function SearchPageClient() {
  const searchParams = useSearchParams();
  const router = useRouter();
  const { user, profile, loading: loadingAuth } = useAuth();
  const [properties, setProperties] = useState<PropertyWithHost[]>([]);
  const [experiences, setExperiences] = useState<Experience[]>([]);
  const [retreats, setRetreats] = useState<any[]>([]);
  const [loading, setLoading] = useState(true);
  const [loadingExperiences, setLoadingExperiences] = useState(true);
  const [loadingRetreats, setLoadingRetreats] = useState(true);
  const [filters, setFilters] = useState<SearchFiltersType>({
    location: searchParams.get('location') || '',
    checkIn: searchParams.get('checkIn') || '',
    checkOut: searchParams.get('checkOut') || '',
    rooms: searchParams.get('rooms') ? parseInt(searchParams.get('rooms')!) : undefined,
    adults: searchParams.get('adults') ? parseInt(searchParams.get('adults')!) : undefined,
  });
  const [showFilters, setShowFilters] = useState(false);
  const [totalResults, setTotalResults] = useState(0);
  const [searchTime, setSearchTime] = useState(0);
  
  // Booking modal states
  const [bookingOpen, setBookingOpen] = useState(false);
  const [selectedItem, setSelectedItem] = useState<Experience | any>(null);
  const [bookingType, setBookingType] = useState<'experience' | 'retreat'>('experience');
  const [form, setForm] = useState({
    name: "",
    email: "",
    date: "",
    guests: 1,
    phone: "",
  });
  const [bookingLoading, setBookingLoading] = useState(false);
  const [paymentInProgress, setPaymentInProgress] = useState(false);
  const paymentRef = useRef<any>(null);
  
  // Wishlist states
  const [wishlistedExperienceIds, setWishlistedExperienceIds] = useState<string[]>([]);
  const [wishlistedRetreatIds, setWishlistedRetreatIds] = useState<string[]>([]);
  
  // Filter states
  const [selectedExperienceCategory, setSelectedExperienceCategory] = useState("");
  const [selectedRetreatCategory, setSelectedRetreatCategory] = useState("");
  const [selectedLocationToggle, setSelectedLocationToggle] = useState<'mountains' | 'delhi-ncr'>('mountains');

  useEffect(() => {
    const fetchProperties = async () => {
      setLoading(true);
      const startTime = Date.now();
      
      try {
        let data;
        
        // Check if any filters are applied
        const hasFilters = Object.values(filters).some(value => {
          if (Array.isArray(value)) {
            return value.length > 0;
          }
          return value !== undefined && value !== null && value !== '';
        });

        if (hasFilters) {
          console.log('Applying filters:', filters);
          data = await searchProperties(filters);
        } else {
          console.log('No filters applied, fetching all properties');
          data = await getProperties();
        }
        
        console.log('Fetched properties:', data);
        setProperties(data);
        setTotalResults(data.length);
        setSearchTime(Date.now() - startTime);
      } catch (error) {
        console.error('Error fetching properties:', error);
      } finally {
        setLoading(false);
      }
    };
    fetchProperties();
  }, [filters]);

  // Fetch experiences
  useEffect(() => {
    const fetchExperiences = async () => {
      try {
        setLoadingExperiences(true);
        const data = await getExperiences();
        setExperiences(data);
      } catch (error) {
        console.error('Error fetching experiences:', error);
      } finally {
        setLoadingExperiences(false);
      }
    };
    fetchExperiences();
  }, []);

  // Fetch retreats
  useEffect(() => {
    const fetchRetreats = async () => {
      try {
        setLoadingRetreats(true);
        const data = await getRetreats();
        setRetreats(data);
      } catch (error) {
        console.error('Error fetching retreats:', error);
      } finally {
        setLoadingRetreats(false);
      }
    };
    fetchRetreats();
  }, []);

  // Fetch wishlist status for experiences
  useEffect(() => {
    let ignore = false;
    async function fetchExperienceWishlist() {
      if (user) {
        const wishlist = await Promise.all(experiences.map(exp => isWishlisted(user.id, exp.id, 'experience')));
        if (!ignore) {
          setWishlistedExperienceIds(experiences.map((exp, i) => wishlist[i] ? exp.id : '').filter(Boolean));
        }
      } else {
        setWishlistedExperienceIds([]);
      }
    }
    fetchExperienceWishlist();
    return () => { ignore = true; };
  }, [user, experiences]);

  // Fetch wishlist status for retreats
  useEffect(() => {
    let ignore = false;
    async function fetchRetreatWishlist() {
      if (user) {
        const wishlist = await Promise.all(retreats.map(retreat => isWishlisted(user.id, retreat.id, 'trip')));
        if (!ignore) {
          setWishlistedRetreatIds(retreats.map((retreat, i) => wishlist[i] ? retreat.id : '').filter(Boolean));
        }
      } else {
        setWishlistedRetreatIds([]);
      }
    }
    fetchRetreatWishlist();
    return () => { ignore = true; };
  }, [user, retreats]);

  // Wishlist handlers
  const handleExperienceWishlist = async (expId: string, wishlisted: boolean, e: React.MouseEvent) => {
    e.preventDefault();
    e.stopPropagation();
    if (!user) {
      toast.error('Please sign in to add experiences to wishlist');
      return;
    }
    
    try {
      if (wishlisted) {
        const success = await removeFromWishlist(user.id, expId, 'experience');
        if (success) {
          setWishlistedExperienceIds(ids => ids.filter(id => id !== expId));
          toast.success('Experience removed from wishlist');
        } else {
          toast.error('Failed to remove from wishlist');
        }
      } else {
        const success = await addToWishlist(user.id, expId, 'experience');
        if (success) {
          setWishlistedExperienceIds(ids => [...ids, expId]);
          toast.success('Experience added to wishlist');
        } else {
          toast.error('Failed to add to wishlist');
        }
      }
    } catch (error) {
      console.error('Wishlist error:', error);
      toast.error('Failed to update wishlist');
    }
  };

  const handleRetreatWishlist = async (retreatId: string, wishlisted: boolean, e: React.MouseEvent) => {
    e.preventDefault();
    e.stopPropagation();
    if (!user) {
      toast.error('Please sign in to add retreats to wishlist');
      return;
    }
    
    try {
      if (wishlisted) {
        const success = await removeFromWishlist(user.id, retreatId, 'trip');
        if (success) {
          setWishlistedRetreatIds(ids => ids.filter(id => id !== retreatId));
          toast.success('Retreat removed from wishlist');
        } else {
          toast.error('Failed to remove from wishlist');
        }
      } else {
        const success = await addToWishlist(user.id, retreatId, 'trip');
        if (success) {
          setWishlistedRetreatIds(ids => [...ids, retreatId]);
          toast.success('Retreat added to wishlist');
        } else {
          toast.error('Failed to add to wishlist');
        }
      }
    } catch (error) {
      console.error('Wishlist error:', error);
      toast.error('Failed to update wishlist');
    }
  };

  // Booking handlers
  const openBooking = (item: Experience | any, type: 'experience' | 'retreat') => {
    if (!user || !profile) {
      router.push(`/auth/signin?redirect=/discover?book=${type}-${item.id}`);
      return;
    }
    setSelectedItem(item);
    setBookingType(type);
    setBookingOpen(true);
  };

  const closeBooking = () => {
    setBookingOpen(false);
    setSelectedItem(null);
    setForm({ name: "", email: "", date: "", guests: 1, phone: "" });
  };

  const handleBook = async (e: React.FormEvent) => {
    e.preventDefault();
    if (!selectedItem || !user || !profile) return;

    setBookingLoading(true);
    try {
      if (bookingType === 'experience') {
        const booking = await createExperienceBooking({
          experienceId: selectedItem.id,
          guestId: user.id,
          email: profile.email,
          name: profile.full_name || "",
          date: form.date,
          guests: form.guests,
          totalPrice: selectedItem.price * form.guests,
        });

        if (booking) {
          // Initialize Razorpay via server-created order
          const orderRes = await fetch('/api/payments/order', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ amount: selectedItem.price * form.guests * 100, currency: 'INR', notes: { type: 'experience', experienceId: selectedItem.id } }),
          });
          const { order, error } = await orderRes.json();
          if (!order) throw new Error(error || 'Failed to initialize payment');

          const options = {
            key: process.env.NEXT_PUBLIC_RAZORPAY_KEY_ID,
            amount: order.amount,
            currency: order.currency,
            name: 'EJA Homestay',
            description: `Booking for ${selectedItem.title}`,
            order_id: order.id,
            handler: async function (response: any) {
              try {
                await sendPaymentReceiptEmail({
                  to: profile.email,
                  guestName: profile.full_name || '',
                  bookingType: 'experience',
                  title: selectedItem.title,
                  checkIn: form.date,
                  checkOut: form.date,
                  guests: form.guests,
                  totalPrice: selectedItem.price * form.guests,
                  paymentRef: response.razorpay_payment_id,
                });

                toast.success('Booking confirmed! Check your email for details.');
                closeBooking();
                router.push('/guest/dashboard');
              } catch (error) {
                console.error('Error sending email:', error);
                toast.success('Booking confirmed!');
                closeBooking();
                router.push('/guest/dashboard');
              }
            },
            prefill: {
              name: profile.full_name || '',
              email: profile.email,
              contact: profile.phone || '',
            },
            theme: {
              color: '#3B82F6',
            },
          } as any;

          const rzp = new (window as any).Razorpay(options);
          rzp.open();
        }
      } else {
        // Retreat booking
        const totalPrice = selectedItem.price * form.guests;
        const orderRes = await fetch('/api/payments/order', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ amount: Math.round(totalPrice * 100), currency: 'INR', notes: { type: 'retreat', tripId: selectedItem.id } }),
        });
        const { order, error } = await orderRes.json();
        if (!order) throw new Error(error || 'Failed to initialize payment');
        
        const options = {
          key: process.env.NEXT_PUBLIC_RAZORPAY_KEY_ID,
          amount: order.amount,
          currency: order.currency,
          name: selectedItem.title,
          description: 'Retreat Payment',
          order_id: order.id,
          handler: async function (response: any) {
            const booking = await createTripBooking({
              tripId: selectedItem.id,
              email: form.email,
              name: form.name,
              date: form.date,
              guests: form.guests,
              totalPrice,
              guestId: profile.id,
            });
            
            await sendPaymentReceiptEmail({
              to: profile.email,
              guestName: profile.full_name || profile.email,
              bookingType: 'Retreat',
              title: selectedItem.title,
              checkIn: form.date,
              checkOut: form.date,
              guests: form.guests,
              totalPrice,
              paymentRef: response.razorpay_payment_id
            });
            
            toast.success('Retreat booked and payment successful!');
            closeBooking();
            router.push('/guest/dashboard');
          },
          prefill: {
            email: profile.email,
            name: profile.full_name,
          },
          theme: { color: '#2563eb' },
          modal: {
            ondismiss: function () {
              toast.error('Payment was cancelled. Please try again.');
            }
          }
        };
        
        ;(window as any).Razorpay && (paymentRef.current = new (window as any).Razorpay(options));
        paymentRef.current.open();
      }
    } catch (error) {
      console.error("Booking error:", error);
      toast.error("Failed to create booking");
    } finally {
      setBookingLoading(false);
    }
  };

  const clearFilters = () => {
    setFilters({
      location: '',
      checkIn: '',
      checkOut: '',
      rooms: undefined,
      adults: undefined,
    });
  };

  // Filter experiences based on selected category and location
  const filteredExperiences = experiences.filter((exp) => {
    // Filter by category
    if (selectedExperienceCategory && exp.categories) {
      const categoryId = experienceFilterData.category.find(cat => cat.label === selectedExperienceCategory)?.id;
      if (categoryId) {
        const categoriesStr = String(exp.categories).toLowerCase();
        const categoryIdLower = categoryId.toLowerCase();
        if (!categoriesStr.includes(categoryIdLower)) {
          return false;
        }
      }
    }
    
    // Filter by location toggle
    if (selectedLocationToggle === 'mountains') {
      const mountainLocations = ['mountain', 'rishikesh', 'manali', 'shimla', 'mussoorie', 'nainital', 'dehradun', 'uttarakhand', 'himachal'];
      const isMountainLocation = mountainLocations.some(loc => 
        exp.location.toLowerCase().includes(loc)
      );
      if (!isMountainLocation) return false;
    } else if (selectedLocationToggle === 'delhi-ncr') {
      const delhiLocations = ['delhi', 'ncr', 'gurgaon', 'gurugram', 'noida', 'faridabad', 'ghaziabad'];
      const isDelhiLocation = delhiLocations.some(loc => 
        exp.location.toLowerCase().includes(loc)
      );
      if (!isDelhiLocation) return false;
    }
    
    return true;
  });

  // Filter retreats based on selected category
  const filteredRetreats = retreats.filter((retreat) => {
    // Filter by category
    if (selectedRetreatCategory && retreat.categories) {
      const hasCategory = Array.isArray(retreat.categories)
        ? retreat.categories.includes(selectedRetreatCategory)
        : retreat.categories === selectedRetreatCategory;
      return hasCategory;
    }
    return true;
  });

  const clearAllFilters = () => {
    setSelectedExperienceCategory("");
    setSelectedRetreatCategory("");
    setSelectedLocationToggle('mountains');
  };

  const hasActiveFilters = selectedExperienceCategory || selectedRetreatCategory || selectedLocationToggle !== 'mountains';

  const hasPropertyFilters = Object.values(filters).some(value => {
    if (Array.isArray(value)) {
      return value.length > 0;
    }
    return value !== undefined && value !== null && value !== '';
  });

  return (
    <div className="min-h-screen bg-gray-50">
      <Navigation />
      <div className="relative">
        <main className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
          {/* Horizontal Filter Bar */}
          <div className="mb-8 sticky top-16 z-40 bg-gray-50 py-4 -mx-8 px-8 border-b border-gray-200">
            <div className="flex items-center gap-3 overflow-x-auto scrollbar-hide pb-4">
              {/* All Filters Button */}
              <button
                onClick={() => setShowFilters(!showFilters)}
                className="flex items-center gap-2 px-4 py-2 bg-white border border-gray-300 rounded-full text-blue-600 font-medium hover:bg-gray-50 transition-colors whitespace-nowrap flex-shrink-0 text-sm shadow-sm"
              >
                <svg className="w-4 h-4" fill="currentColor" viewBox="0 0 20 20">
                  <path fillRule="evenodd" d="M3 3a1 1 0 011-1h12a1 1 0 011 1v3a1 1 0 01-.293.707L12 11.414V15a1 1 0 01-.293.707l-2 2A1 1 0 018 17v-5.586L3.293 6.707A1 1 0 013 6V3z" clipRule="evenodd" />
                </svg>
                All filters
              </button>

              {/* Property Filters - Families to Special Offers */}
              <button className="flex items-center gap-2 px-4 py-2 bg-white border border-gray-300 rounded-full text-gray-700 font-medium hover:bg-gray-50 transition-colors whitespace-nowrap text-sm shadow-sm">
                <span className="text-base">👨‍👩‍👧‍👦</span>
                <span>Families only</span>
              </button>

              <button className="flex items-center gap-2 px-4 py-2 bg-white border border-gray-300 rounded-full text-gray-700 font-medium hover:bg-gray-50 transition-colors whitespace-nowrap text-sm shadow-sm">
                <span className="text-base">👩</span>
                <span>Females only</span>
              </button>

              <button className="flex items-center gap-2 px-4 py-2 bg-white border border-gray-300 rounded-full text-gray-700 font-medium hover:bg-gray-50 transition-colors whitespace-nowrap text-sm shadow-sm">
                <span className="text-base">🐕</span>
                <span>Pet-Friendly</span>
              </button>

              <button className="flex items-center gap-2 px-4 py-2 bg-white border border-gray-300 rounded-full text-gray-700 font-medium hover:bg-gray-50 transition-colors whitespace-nowrap text-sm shadow-sm">
                <span className="text-base">🥗</span>
                <span>Pure-Veg</span>
              </button>

              <button className="flex items-center gap-2 px-4 py-2 bg-white border border-gray-300 rounded-full text-gray-700 font-medium hover:bg-gray-50 transition-colors whitespace-nowrap text-sm shadow-sm">
                <span className="text-base">🏷️</span>
                <span>Special offers</span>
              </button>

              {/* Location Toggle */}
              <div className="bg-gray-100 rounded-xl p-1 flex">
                {experienceFilterData.location.map((location) => (
                  <button
                    key={location.id}
                    onClick={() => setSelectedLocationToggle(location.id as 'mountains' | 'delhi-ncr')}
                    className={`flex items-center gap-2 px-4 py-2 rounded-lg text-sm font-medium transition-all duration-200 ${
                      selectedLocationToggle === location.id
                        ? 'bg-yellow-400 text-white shadow-md'
                        : 'bg-white text-gray-600 hover:text-gray-900'
                    }`}
                  >
                    <span className="text-lg">{location.icon}</span>
                    {location.label}
                  </button>
                ))}
              </div>

              {/* Experience Category Filters */}
              {experienceFilterData.category.map((category) => (
                <button
                  key={category.id}
                  onClick={() => setSelectedExperienceCategory(selectedExperienceCategory === category.label ? "" : category.label)}
                  className={`flex items-center gap-2 px-4 py-2 rounded-full border transition-all duration-200 whitespace-nowrap text-sm font-medium ${
                    selectedExperienceCategory === category.label
                      ? `${category.color} shadow-lg scale-105`
                      : 'bg-white border-gray-300 text-gray-700 hover:border-gray-400 hover:shadow-sm'
                  }`}
                >
                  <span className="text-lg">{category.icon}</span>
                  {category.label}
                </button>
              ))}

              {/* Retreat Category Filters */}
              {retreatFilterData.category.map((category) => (
                <button
                  key={category.id}
                  onClick={() => setSelectedRetreatCategory(selectedRetreatCategory === category.id ? "" : category.id)}
                  className={`flex items-center gap-2 px-4 py-2 rounded-full border transition-all duration-200 whitespace-nowrap text-sm font-medium ${
                    selectedRetreatCategory === category.id
                      ? 'bg-yellow-400 border-yellow-400 text-white shadow-lg scale-105'
                      : 'bg-white border-gray-300 text-gray-700 hover:border-gray-400 hover:shadow-sm'
                  }`}
                >
                  <span className="text-lg">{category.icon}</span>
                  {category.label}
                </button>
              ))}

              {/* Scroll Arrow */}
              <button 
                onClick={() => {
                  const container = document.querySelector('.overflow-x-auto');
                  if (container) {
                    container.scrollBy({ left: 200, behavior: 'smooth' });
                  }
                }}
                className="flex-shrink-0 w-8 h-8 bg-white border border-gray-300 rounded-full flex items-center justify-center shadow-sm hover:bg-gray-50 transition-colors cursor-pointer"
              >
                <svg className="w-4 h-4 text-gray-600" fill="currentColor" viewBox="0 0 20 20">
                  <path fillRule="evenodd" d="M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z" clipRule="evenodd" />
                </svg>
              </button>
            </div>
          </div>

          {/* Breadcrumbs */}
          <div className="mb-6">
            <Breadcrumbs />
          </div>
          
          {/* Header Section */}
          <div className="mb-8">
            <div className="flex flex-col sm:flex-row sm:items-center sm:justify-between gap-4">
              <div>
                <h1 className="text-3xl font-bold text-gray-900 mb-2">
                  {filters.location ? `Properties in ${filters.location}` : 'All Properties'}
                </h1>
                {!loading && (
                  <div className="flex items-center gap-4 text-gray-600">
                    <span>{totalResults} properties found</span>
                    {searchTime > 0 && (
                      <span>• Found in {searchTime}ms</span>
                    )}
                  </div>
                )}
              </div>
              
              <div className="flex items-center gap-3">
                {/* Mobile Filter Toggle */}
                <button
                  onClick={() => setShowFilters(!showFilters)}
                  className="sm:hidden flex items-center gap-2 px-4 py-2 bg-white border border-gray-300 rounded-lg hover:bg-gray-50 transition-colors"
                >
                  <FunnelIcon className="w-5 h-5" />
                  Filters
                </button>
                
                {/* Clear Filters */}
                {hasPropertyFilters && (
                  <button
                    onClick={clearFilters}
                    className="flex items-center gap-2 px-4 py-2 text-gray-600 hover:text-gray-900 transition-colors"
                  >
                    <XMarkIcon className="w-4 h-4" />
                    Clear all
                  </button>
                )}
              </div>
            </div>

            {/* Active Filters Display */}
            {hasPropertyFilters && (
              <div 
                className="flex flex-wrap gap-2 mt-4 animate-fade-in"
              >
                {filters.location && (
                  <span className="inline-flex items-center gap-1 px-3 py-1 bg-blue-100 text-blue-800 rounded-full text-sm">
                    <MapPinIcon className="w-4 h-4" />
                    {filters.location}
                  </span>
                )}
                {filters.checkIn && (
                  <span className="inline-flex items-center gap-1 px-3 py-1 bg-green-100 text-green-800 rounded-full text-sm">
                    Check-in: {filters.checkIn}
                  </span>
                )}
                {filters.checkOut && (
                  <span className="inline-flex items-center gap-1 px-3 py-1 bg-green-100 text-green-800 rounded-full text-sm">
                    Check-out: {filters.checkOut}
                  </span>
                )}
                {filters.adults && (
                  <span className="inline-flex items-center gap-1 px-3 py-1 bg-purple-100 text-purple-800 rounded-full text-sm">
                    {filters.adults} adults
                  </span>
                )}
              </div>
            )}
          </div>

          {/* Mobile Filters Panel */}
          {showFilters && (
            <div
              className="sm:hidden mb-6 p-4 bg-white rounded-lg shadow-lg border border-gray-200 animate-fade-in"
            >
              <div className="flex items-center justify-between mb-4">
                <h3 className="font-semibold text-gray-900">Filters</h3>
                <button
                  onClick={() => setShowFilters(false)}
                  className="text-gray-500 hover:text-gray-700"
                >
                  <XMarkIcon className="w-5 h-5" />
                </button>
              </div>
              {/* Add mobile filter components here */}
              <div className="text-gray-500 text-sm">
                Mobile filter components would go here
              </div>
            </div>
          )}
          <div className="mb-8">
            <div className="flex items-center gap-3 overflow-x-auto scrollbar-hide pb-4">
              {/* All Filters Button */}
              <button
                onClick={() => setShowFilters(!showFilters)}
                className="flex items-center gap-2 px-4 py-2 bg-white border border-gray-300 rounded-full text-blue-600 font-medium hover:bg-gray-50 transition-colors whitespace-nowrap flex-shrink-0 text-sm shadow-sm"
              >
                <svg className="w-4 h-4" fill="currentColor" viewBox="0 0 20 20">
                  <path fillRule="evenodd" d="M3 3a1 1 0 011-1h12a1 1 0 011 1v3a1 1 0 01-.293.707L12 11.414V15a1 1 0 01-.293.707l-2 2A1 1 0 018 17v-5.586L3.293 6.707A1 1 0 013 6V3z" clipRule="evenodd" />
                </svg>
                All filters
              </button>

              {/* Property Filters - Families to Special Offers */}
              <button className="flex items-center gap-2 px-4 py-2 bg-white border border-gray-300 rounded-full text-gray-700 font-medium hover:bg-gray-50 transition-colors whitespace-nowrap text-sm shadow-sm">
                <span className="text-base">👨‍👩‍👧‍👦</span>
                <span>Families only</span>
              </button>

              <button className="flex items-center gap-2 px-4 py-2 bg-white border border-gray-300 rounded-full text-gray-700 font-medium hover:bg-gray-50 transition-colors whitespace-nowrap text-sm shadow-sm">
                <span className="text-base">👩</span>
                <span>Females only</span>
              </button>

              <button className="flex items-center gap-2 px-4 py-2 bg-white border border-gray-300 rounded-full text-gray-700 font-medium hover:bg-gray-50 transition-colors whitespace-nowrap text-sm shadow-sm">
                <span className="text-base">🐕</span>
                <span>Pet-Friendly</span>
              </button>

              <button className="flex items-center gap-2 px-4 py-2 bg-white border border-gray-300 rounded-full text-gray-700 font-medium hover:bg-gray-50 transition-colors whitespace-nowrap text-sm shadow-sm">
                <span className="text-base">🥗</span>
                <span>Pure-Veg</span>
              </button>

              <button className="flex items-center gap-2 px-4 py-2 bg-white border border-gray-300 rounded-full text-gray-700 font-medium hover:bg-gray-50 transition-colors whitespace-nowrap text-sm shadow-sm">
                <span className="text-base">🏷️</span>
                <span>Special offers</span>
              </button>

              {/* Location Toggle */}
              <div className="bg-gray-100 rounded-xl p-1 flex">
                {experienceFilterData.location.map((location) => (
                  <button
                    key={location.id}
                    onClick={() => setSelectedLocationToggle(location.id as 'mountains' | 'delhi-ncr')}
                    className={`flex items-center gap-2 px-4 py-2 rounded-lg text-sm font-medium transition-all duration-200 ${
                      selectedLocationToggle === location.id
                        ? 'bg-yellow-400 text-white shadow-md'
                        : 'bg-white text-gray-600 hover:text-gray-900'
                    }`}
                  >
                    <span className="text-lg">{location.icon}</span>
                    {location.label}
                  </button>
                ))}
              </div>

              {/* Experience Category Filters */}
              {experienceFilterData.category.map((category) => (
                <button
                  key={category.id}
                  onClick={() => setSelectedExperienceCategory(selectedExperienceCategory === category.label ? "" : category.label)}
                  className={`flex items-center gap-2 px-4 py-2 rounded-full border transition-all duration-200 whitespace-nowrap text-sm font-medium ${
                    selectedExperienceCategory === category.label
                      ? `${category.color} shadow-lg scale-105`
                      : 'bg-white border-gray-300 text-gray-700 hover:border-gray-400 hover:shadow-sm'
                  }`}
                >
                  <span className="text-lg">{category.icon}</span>
                  {category.label}
                </button>
              ))}

              {/* Retreat Category Filters */}
              {retreatFilterData.category.map((category) => (
                <button
                  key={category.id}
                  onClick={() => setSelectedRetreatCategory(selectedRetreatCategory === category.id ? "" : category.id)}
                  className={`flex items-center gap-2 px-4 py-2 rounded-full border transition-all duration-200 whitespace-nowrap text-sm font-medium ${
                    selectedRetreatCategory === category.id
                      ? 'bg-yellow-400 border-yellow-400 text-white shadow-lg scale-105'
                      : 'bg-white border-gray-300 text-gray-700 hover:border-gray-400 hover:shadow-sm'
                  }`}
                >
                  <span className="text-lg">{category.icon}</span>
                  {category.label}
                </button>
              ))}

              {/* Scroll Arrow */}
              <button 
                onClick={() => {
                  const container = document.querySelector('.overflow-x-auto');
                  if (container) {
                    container.scrollBy({ left: 200, behavior: 'smooth' });
                  }
                }}
                className="flex-shrink-0 w-8 h-8 bg-white border border-gray-300 rounded-full flex items-center justify-center shadow-sm hover:bg-gray-50 transition-colors cursor-pointer"
              >
                <svg className="w-4 h-4 text-gray-600" fill="currentColor" viewBox="0 0 20 20">
                  <path fillRule="evenodd" d="M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z" clipRule="evenodd" />
                </svg>
              </button>
            </div>
          </div>



          {/* Global Clear All Filters */}
          {hasActiveFilters && (
            <div className="mb-6 text-center">
              <button
                onClick={clearAllFilters}
                className="inline-flex items-center gap-2 px-6 py-3 bg-yellow-400 text-white rounded-xl font-medium hover:bg-yellow-500 transition-colors shadow-lg"
              >
                <XMarkIcon className="w-5 h-5" />
                Clear All Filters
              </button>
            </div>
          )}

          {/* Combined Results Section */}
          {loading || loadingExperiences || loadingRetreats ? (
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8">
              {[...Array(12)].map((_, index) => (
                <div key={index} className="bg-white rounded-2xl shadow-lg overflow-hidden animate-pulse">
                  <div className="h-56 bg-gray-200"></div>
                  <div className="p-6 space-y-4">
                    <div className="h-6 bg-gray-200 rounded"></div>
                    <div className="h-4 bg-gray-200 rounded w-3/4"></div>
                    <div className="h-4 bg-gray-200 rounded w-1/2"></div>
                    <div className="h-8 bg-gray-200 rounded"></div>
                  </div>
                </div>
              ))}
            </div>
          ) : (properties.length === 0 && filteredExperiences.length === 0 && filteredRetreats.length === 0) ? (
            <div className="text-center py-16 animate-fade-in">
              <div className="w-24 h-24 bg-gray-100 rounded-full flex items-center justify-center mx-auto mb-6">
                <MagnifyingGlassIcon className="w-12 h-12 text-gray-400" />
              </div>
              <h3 className="text-xl font-semibold text-gray-900 mb-2">No results found</h3>
              <p className="text-gray-600 mb-6 max-w-md mx-auto">
                Try adjusting your filters or browse our popular destinations
              </p>
              <button
                onClick={clearAllFilters}
                className="px-6 py-3 bg-yellow-400 text-white rounded-lg hover:bg-yellow-500 transition-colors"
              >
                Clear All Filters
              </button>
            </div>
          ) : (
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8">
              {/* Properties */}
              {properties.map((property, index) => (
                <PropertyCard key={property.id} property={property} index={index} />
              ))}
              
              {/* Experiences */}
              {filteredExperiences.map((exp, index) => {
                const isWishlisted = wishlistedExperienceIds.includes(exp.id);
                return (
                  <Link
                    key={exp.id}
                    href={`/experiences/${exp.id}`}
                    className="group bg-white rounded-2xl shadow-lg hover:shadow-2xl transition-all duration-300 overflow-hidden animate-fade-in cursor-pointer transform hover:-translate-y-2"
                    style={{ animationDelay: `${index * 0.1}s` }}
                  >
                    {/* Image Section */}
                    <div className="relative h-56 overflow-hidden">
                      <Image
                        src={buildCoverFirstImages(exp.cover_image, exp.images)[0] || '/placeholder-experience.jpg'}
                        alt={exp.title}
                        fill
                        className="object-cover group-hover:scale-110 transition-transform duration-500"
                        sizes="(max-width: 768px) 100vw, (max-width: 1200px) 50vw, 33vw"
                      />
                      
                      {/* Category Badge - Top Left */}
                      {exp.categories && (
                        <div className="absolute top-4 left-4 z-10">
                          <span className="inline-flex items-center gap-1 px-3 py-1.5 rounded-full text-xs font-medium border bg-white/95 backdrop-blur-sm shadow-lg text-gray-700 border-gray-200">
                            {exp.categories}
                          </span>
                        </div>
                      )}
                      
                      {/* Saved Button - Top Right */}
                      {user && (
                        <button 
                          className="absolute top-4 right-4 z-10 p-2 rounded-full bg-white/95 backdrop-blur-sm shadow-lg hover:bg-yellow-50 transition-all duration-200 hover:scale-110 active:scale-95"
                          onClick={(e) => handleExperienceWishlist(exp.id, isWishlisted, e)}
                          aria-label={isWishlisted ? 'Remove from wishlist' : 'Add to wishlist'}
                          disabled={false}
                        >
                          {isWishlisted ? (
                            <BookmarkSolid className="w-5 h-5 text-yellow-500" />
                          ) : (
                            <BookmarkOutline className="w-5 h-5 text-gray-600 hover:text-yellow-500 transition-colors" />
                          )}
                        </button>
                      )}
                      
                      {/* Price Badge - Bottom Left */}
                      <div className="absolute bottom-4 left-4 z-10 bg-white/95 backdrop-blur-sm px-4 py-2 rounded-full text-sm font-bold text-gray-900 shadow-lg border border-gray-200">
                        ₹{exp.price?.toLocaleString()}
                      </div>
                      
                      {/* Gradient Overlay */}
                      <div className="absolute inset-0 bg-gradient-to-t from-black/20 via-transparent to-transparent opacity-0 group-hover:opacity-100 transition-opacity duration-300" />
                    </div>

                    {/* Content Section */}
                    <div className="p-6">
                      <h3 className="font-bold text-lg text-gray-900 group-hover:text-yellow-500 transition-colors line-clamp-2 leading-tight mb-3">
                        {exp.title}
                      </h3>
                      
                      {/* Location & Duration */}
                      <div className="flex items-center gap-4 text-gray-600 mb-4">
                        <div className="flex items-center gap-1">
                          <MapPinIcon className="w-4 h-4" />
                          <span className="text-sm">{exp.location}</span>
                        </div>
                        {exp.duration && (
                          <div className="flex items-center gap-1">
                            <ClockIcon className="w-4 h-4" />
                            <span className="text-sm">{exp.duration}</span>
                          </div>
                        )}
                      </div>
                      
                      {/* Price & Action */}
                      <div className="flex items-center justify-between pt-4 border-t border-gray-100">
                        <div className="flex items-baseline gap-1">
                          <span className="text-lg font-bold text-gray-900">₹{exp.price?.toLocaleString()}</span>
                          <span className="text-sm text-gray-500">/ person</span>
                        </div>
                        <button
                          onClick={(e) => {
                            e.preventDefault();
                            e.stopPropagation();
                            openBooking(exp, 'experience');
                          }}
                          className="px-6 py-2 bg-yellow-400 text-white rounded-xl font-medium hover:bg-yellow-500 transition-colors text-sm"
                        >
                          Book Now
                        </button>
                      </div>
                    </div>
                  </Link>
                );
              })}
              
              {/* Retreats */}
              {filteredRetreats.map((retreat, index) => {
                const isWishlisted = wishlistedRetreatIds.includes(retreat.id);
                return (
                  <Link
                    key={retreat.id}
                    href={`/retreats/${retreat.id}`}
                    className="group bg-white rounded-2xl shadow-lg hover:shadow-2xl transition-all duration-300 overflow-hidden animate-fade-in cursor-pointer transform hover:-translate-y-2"
                    style={{ animationDelay: `${index * 0.1}s` }}
                  >
                    {/* Image Section */}
                    <div className="relative h-56 overflow-hidden">
                      <Image
                        src={buildCoverFirstImages(retreat.image || retreat.cover_image, retreat.images)[0] || '/placeholder-experience.jpg'}
                        alt={retreat.title}
                        fill
                        className="object-cover group-hover:scale-110 transition-transform duration-500"
                        sizes="(max-width: 768px) 100vw, (max-width: 1200px) 50vw, 33vw"
                      />
                      
                      {/* Category Badge - Top Left */}
                      {retreat.categories && (
                        <div className="absolute top-4 left-4 z-10">
                          <span className="inline-flex items-center gap-1 px-3 py-1.5 rounded-full text-xs font-medium border bg-white/95 backdrop-blur-sm shadow-lg text-gray-700 border-gray-200">
                            {Array.isArray(retreat.categories) ? retreat.categories[0] : retreat.categories}
                          </span>
                        </div>
                      )}
                      
                      {/* Saved Button - Top Right */}
                      {user && (
                        <button 
                          className="absolute top-4 right-4 z-10 p-2 rounded-full bg-white/95 backdrop-blur-sm shadow-lg hover:bg-yellow-50 transition-all duration-200 hover:scale-110 active:scale-95"
                          onClick={(e) => handleRetreatWishlist(retreat.id, isWishlisted, e)}
                          aria-label={isWishlisted ? 'Remove from wishlist' : 'Add to wishlist'}
                          disabled={false}
                        >
                          {isWishlisted ? (
                            <BookmarkSolid className="w-5 h-5 text-yellow-500" />
                          ) : (
                            <BookmarkOutline className="w-5 h-5 text-gray-600 hover:text-yellow-500 transition-colors" />
                          )}
                        </button>
                      )}
                      
                      {/* Price Badge - Bottom Left */}
                      <div className="absolute bottom-4 left-4 z-10 bg-white/95 backdrop-blur-sm px-4 py-2 rounded-full text-sm font-bold text-gray-900 shadow-lg border border-gray-200">
                        ₹{retreat.price?.toLocaleString()}
                      </div>
                      
                      {/* Gradient Overlay */}
                      <div className="absolute inset-0 bg-gradient-to-t from-black/20 via-transparent to-transparent opacity-0 group-hover:opacity-100 transition-opacity duration-300" />
                    </div>

                    {/* Content Section */}
                    <div className="p-6">
                      <h3 className="font-bold text-lg text-gray-900 group-hover:text-yellow-500 transition-colors line-clamp-2 leading-tight mb-3">
                        {retreat.title}
                      </h3>
                      
                      {/* Location & Duration */}
                      <div className="flex items-center gap-4 text-gray-600 mb-4">
                        <div className="flex items-center gap-1">
                          <MapPinIcon className="w-4 h-4" />
                          <span className="text-sm">{retreat.location}</span>
                        </div>
                        {retreat.duration && (
                          <div className="flex items-center gap-1">
                            <ClockIcon className="w-4 h-4" />
                            <span className="text-sm">{retreat.duration}</span>
                          </div>
                        )}
                      </div>
                      
                      {/* Price & Action */}
                      <div className="flex items-center justify-between pt-4 border-t border-gray-100">
                        <div className="flex items-baseline gap-1">
                          <span className="text-lg font-bold text-gray-900">₹{retreat.price?.toLocaleString()}</span>
                          <span className="text-sm text-gray-500">/ person</span>
                        </div>
                        <button
                          onClick={(e) => {
                            e.preventDefault();
                            e.stopPropagation();
                            openBooking(retreat, 'retreat');
                          }}
                          className="px-6 py-2 bg-yellow-400 text-white rounded-xl font-medium hover:bg-yellow-500 transition-colors text-sm"
                        >
                          Book Now
                        </button>
                      </div>
                    </div>
                  </Link>
                );
              })}
            </div>
          )}
        </main>
      </div>

      {/* Booking Modal */}
      <Modal open={bookingOpen} onClose={closeBooking}>
        <div className="space-y-6">
          {/* Item Summary */}
          {selectedItem && (
            <div className="bg-gradient-to-r from-yellow-50 to-orange-50 rounded-xl p-4 border border-yellow-100">
              <div className="flex items-center gap-3">
                <div className="w-12 h-12 rounded-lg overflow-hidden bg-gray-200 flex-shrink-0">
                  <Image
                    src={buildCoverFirstImages(selectedItem.cover_image || selectedItem.image, selectedItem.images)[0] || '/placeholder-experience.jpg'}
                    alt={selectedItem.title}
                    width={48}
                    height={48}
                    className="w-full h-full object-cover"
                  />
                </div>
                <div className="flex-1 min-w-0">
                  <h3 className="font-semibold text-gray-900 text-sm truncate">{selectedItem.title}</h3>
                  <p className="text-gray-600 text-xs truncate">{selectedItem.location}</p>
                  <div className="flex items-center gap-2 mt-1">
                    <span className="text-lg font-bold text-yellow-600">₹{selectedItem.price?.toLocaleString()}</span>
                    <span className="text-gray-500 text-xs">per person</span>
                  </div>
                </div>
              </div>
            </div>
          )}

          {loadingAuth ? (
            <div className="text-center py-8">
              <p className="text-lg text-gray-700 mb-4">Loading profile...</p>
            </div>
          ) : (
            <form onSubmit={handleBook} className="space-y-5">
              {/* Date and Guests Row */}
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    <CalendarIcon className="w-4 h-4 inline mr-1" />
                    Preferred Date
                  </label>
                  <Input
                    type="date"
                    value={form.date}
                    onChange={e => setForm(f => ({ ...f, date: e.target.value }))}
                    required
                    min={new Date().toISOString().split('T')[0]}
                    className="w-full"
                  />
                </div>
                
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    <UsersIcon className="w-4 h-4 inline mr-1" />
                    Number of Guests
                  </label>
                  <Input
                    type="number"
                    min={1}
                    max={selectedItem?.max_guests || 10}
                    value={form.guests}
                    onChange={e => setForm(f => ({ ...f, guests: Number(e.target.value) }))}
                    required
                    className="w-full"
                  />
                </div>
              </div>
              
              {/* Contact Information */}
              <div className="space-y-4">
                <h4 className="text-sm font-semibold text-gray-900 border-b border-gray-200 pb-2">
                  Contact Information
                </h4>
                
                <Input
                  label="Full Name"
                  type="text"
                  value={form.name}
                  onChange={e => setForm(f => ({ ...f, name: e.target.value }))}
                  placeholder="Enter your full name"
                  required
                />
                
                <Input
                  label="Email Address"
                  type="email"
                  value={form.email}
                  onChange={e => setForm(f => ({ ...f, email: e.target.value }))}
                  placeholder="Enter your email address"
                  required
                />
                
                <Input
                  label="Phone Number"
                  type="tel"
                  value={form.phone}
                  onChange={e => setForm(f => ({ ...f, phone: e.target.value }))}
                  placeholder="Enter your phone number"
                  required
                />
              </div>

              {/* Price Calculation */}
              {selectedItem && form.date && form.guests > 0 && (
                <div className="bg-gray-50 rounded-xl p-4 border border-gray-200">
                  <h4 className="text-sm font-semibold text-gray-900 mb-3">Booking Summary</h4>
                  <div className="space-y-2 text-sm">
                    <div className="flex justify-between">
                      <span className="text-gray-600">Price per person:</span>
                      <span>₹{selectedItem.price?.toLocaleString()}</span>
                    </div>
                    <div className="flex justify-between">
                      <span className="text-gray-600">Number of guests:</span>
                      <span>{form.guests}</span>
                    </div>
                    <div className="flex justify-between">
                      <span className="text-gray-600">Date:</span>
                      <span>{new Date(form.date).toLocaleDateString('en-US', {
                        weekday: 'short',
                        year: 'numeric',
                        month: 'short',
                        day: 'numeric'
                      })}</span>
                    </div>
                    <div className="border-t border-gray-300 pt-2 flex justify-between font-semibold text-lg">
                      <span className="text-gray-900">Total Amount:</span>
                      <span className="text-yellow-600">₹{(selectedItem.price * form.guests).toLocaleString()}</span>
                    </div>
                  </div>
                </div>
              )}

              {/* Action Buttons */}
              <div className="flex gap-3 pt-2">
                <Button 
                  type="submit" 
                  loading={bookingLoading || paymentInProgress} 
                  disabled={bookingLoading || paymentInProgress || !form.date || !form.name || !form.email || !form.phone || form.guests < 1}
                  className="flex-1"
                  size="lg"
                >
                  <CalendarIcon className="w-5 h-5 mr-2" />
                  Confirm Booking
                </Button>
                <Button 
                  type="button"
                  variant="outline"
                  onClick={closeBooking}
                  className="px-6"
                  size="lg"
                >
                  Cancel
                </Button>
              </div>
            </form>
          )}
        </div>
      </Modal>

      {/* Razorpay Script */}
      <Script src="https://checkout.razorpay.com/v1/checkout.js" />
      
      <Footer />
    </div>
  );
} 